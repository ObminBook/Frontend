import React, { useEffect, useRef, useState } from 'react';
import {
  addDoc,
  collection,
  doc,
  getDoc,
  onSnapshot,
  orderBy,
  query,
  serverTimestamp,
  setDoc,
  where,
} from 'firebase/firestore';
import { useNavigate } from 'react-router-dom';
import styles from './ChatPage.module.scss';
import { Header } from '../../components/layout/Header/Header';
import { User } from '../../types/User';
import { miniIcons } from '../../assets/images/miniIcons';
import { db } from '../../firebase.config';
import { loginToFirebase } from '../../utils/firebaseLogin';
import avatar from '../../assets/images/common/avatar.svg';
import { SearchQueryContainer } from '@/components/widgets/searchQuery/containers/SearchQueryContainer';

interface Message {
  id: string;
  text: string;
  user: string; // string!
  roomId: string;
  createdAt: any;
}

const mockUsers: User[] = [
  {
    id: '1', // string!
    email: 'anna@example.com',
    firstName: 'Anna',
    lastName: 'M√ºller',
    city: 'Berlin',
    creatingDate: '2024-01-10',
    description: '–õ—é–±–ª—é —á–∏—Ç–∞—Ç–∏ —Å—É—á–∞—Å–Ω—É –ø—Ä–æ–∑—É',
    profilePicture: '',
  },
  {
    id: '2', // string!
    email: 'max@example.com',
    firstName: 'Max',
    lastName: 'Schneider',
    city: 'Hamburg',
    creatingDate: '2023-07-20',
    description: '–ö–æ–ª–µ–∫—Ü—ñ–æ–Ω—É—é —Ä—ñ–¥–∫—ñ—Å–Ω—ñ –∫–Ω–∏–≥–∏',
    profilePicture: '',
  },
];

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ roomId –¥–ª—è –ø–∞—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ä—è–¥–∫–æ–≤—ñ id)
const getRoomId = (uid1: string, uid2: string) => [uid1, uid2].sort().join('_');

export const ChatPage: React.FC = () => {
  const [newMessage, setNewMessage] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [currentUserId, setCurrentUserId] = useState<string>(''); // string!
  const [roomId, setRoomId] = useState<string>('');
  const [isLoading, setIsLoading] = useState(true);

  const buttonRef = useRef<HTMLButtonElement | null>(null);
  const navigate = useNavigate();

  // –õ–æ–≥—ñ–Ω
  useEffect(() => {
    const authenticate = async () => {
      try {
        const userCredential = await loginToFirebase();
        if (userCredential) {
          setCurrentUserId(userCredential.user.uid); // uid ‚Äî —Ü–µ string
        } else {
          navigate('/login');
        }
      } finally {
        setIsLoading(false);
      }
    };
    authenticate();
  }, [navigate]);

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è room –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  useEffect(() => {
    if (!currentUserId || !selectedUser) return;

    const setupRoom = async () => {
      const rid = getRoomId(currentUserId, String(selectedUser.id));
      const roomRef = doc(db, 'rooms', rid);
      const roomSnap = await getDoc(roomRef);

      if (!roomSnap.exists()) {
        await setDoc(roomRef, {
          users: [currentUserId, selectedUser.id],
          createdAt: serverTimestamp(),
        });
      }
      setRoomId(rid);
    };

    setupRoom();
  }, [currentUserId, selectedUser]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è room
  useEffect(() => {
    console.log('=== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–õ–£–•–ê–ß–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ===');
    console.log('roomId:', roomId);

    if (!roomId) {
      console.log('‚ùå roomId –ø–æ—Ä–æ–∂–Ω—ñ–π, –æ—á–∏—â—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
      setMessages([]);
      return;
    }

    console.log('üì• –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª—É—Ö–∞—á –¥–ª—è roomId:', roomId);

    const messagesRef = collection(db, 'messages');
    const q = query(
      messagesRef,
      where('roomId', '==', roomId),
      orderBy('createdAt', 'asc') // –Ø–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫
    );

    const unsubscribe = onSnapshot(
      q,
      {
        includeMetadataChanges: true, // –í–∫–ª—é—á–∞—î–º–æ –∑–º—ñ–Ω–∏ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è
      },
      (snapshot) => {
        console.log('üì® Snapshot –æ—Ç—Ä–∏–º–∞–Ω–æ:', {
          size: snapshot.size,
          empty: snapshot.empty,
          hasPendingWrites: snapshot.metadata.hasPendingWrites,
          fromCache: snapshot.metadata.fromCache,
        });

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
        snapshot.docChanges().forEach((change) => {
          console.log(`–ó–º—ñ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${change.type}`, {
            id: change.doc.id,
            data: change.doc.data(),
          });
        });

        const msgs: Message[] = snapshot.docs.map((doc) => {
          const data = doc.data();
          return {
            id: doc.id,
            text: data.text,
            user: data.user,
            roomId: data.roomId,
            createdAt: data.createdAt,
          };
        });

        console.log('üìã –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', msgs.length);
        setMessages(msgs);
      },
      (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ª—É—Ö–∞—á–∞:', error);
      }
    );

    return () => {
      console.log('üõë –í—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–ª—É—Ö–∞—á –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å');
      unsubscribe();
    };
  }, [roomId]);

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  // –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ handleSendMessage
  const handleSendMessage = async () => {
    console.log('=== –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –í–Ü–î–ü–†–ê–í–ö–ò ===');
    console.log('newMessage:', `"${newMessage}"`);
    console.log('roomId:', roomId);
    console.log('currentUserId:', currentUserId);

    if (!newMessage.trim()) {
      console.log('‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î');
      return;
    }

    if (!roomId) {
      console.log('‚ùå roomId –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π - –ø—Ä–æ–±–ª–µ–º–∞ –∑—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∫—ñ–º–Ω–∞—Ç–∏');
      alert('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É —á–∞—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firebase.');
      return;
    }

    if (!currentUserId) {
      console.log('‚ùå currentUserId –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π - –ø—Ä–æ–±–ª–µ–º–∞ –∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é');
      return;
    }

    console.log('‚úÖ –í—Å—ñ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...');

    const messagesRef = collection(db, 'messages');
    try {
      await addDoc(messagesRef, {
        text: newMessage,
        createdAt: serverTimestamp(),
        user: currentUserId,
        roomId,
      });
      console.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      setNewMessage('');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      if (error.code === 'permission-denied') {
        alert('–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firestore.');
      }
    }
  };

  // –¢–∞–∫–æ–∂ –¥–æ–¥–∞–π—Ç–µ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è useEffect, —â–æ —Å—Ç–≤–æ—Ä—é—î room
  useEffect(() => {
    console.log('=== –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø ROOM ===');
    console.log('currentUserId:', currentUserId);
    console.log('selectedUser:', selectedUser);

    if (!currentUserId) {
      console.log('‚ùå currentUserId –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π');
      return;
    }

    if (!selectedUser) {
      console.log('‚ùå selectedUser –Ω–µ –≤–∏–±—Ä–∞–Ω–∏–π');
      return;
    }

    const setupRoom = async () => {
      try {
        console.log('–°—Ç–≤–æ—Ä—é—î–º–æ roomId...');
        const rid = getRoomId(currentUserId, String(selectedUser.id));
        console.log('Generated roomId:', rid);

        // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        console.log('–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫—ñ–º–Ω–∞—Ç–∞...');
        const roomRef = doc(db, 'rooms', rid);

        let roomExists = false;
        try {
          const roomSnap = await getDoc(roomRef);
          roomExists = roomSnap.exists();
          console.log('–ö—ñ–º–Ω–∞—Ç–∞ —ñ—Å–Ω—É—î:', roomExists);
        } catch (readError) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏:', readError);
          // –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏, —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏
        }

        if (!roomExists) {
          console.log('–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫—ñ–º–Ω–∞—Ç—É...');
          await setDoc(roomRef, {
            users: [currentUserId, String(selectedUser.id)],
            createdAt: serverTimestamp(),
          });
          console.log('‚úÖ –ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        } else {
          console.log('‚úÖ –ö—ñ–º–Ω–∞—Ç–∞ –≤–∂–µ —ñ—Å–Ω—É—î');
        }

        setRoomId(rid);
        console.log('‚úÖ roomId –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π:', rid);
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏:', error);

        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        if (error.code === 'permission-denied') {
          console.error(
            'üî• –ü–†–û–ë–õ–ï–ú–ê –ó –ü–†–ê–í–ò–õ–ê–ú–ò FIRESTORE! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Rules –≤ Firebase Console'
          );
          alert('–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Firebase. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏ Firestore.');
        } else if (error.code === 'unauthenticated') {
          console.error('üîë –ü–†–û–ë–õ–ï–ú–ê –ó –ê–£–¢–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–Ñ–Æ! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π');
          navigate('/login');
        }
      }
    };

    setupRoom();
  }, [currentUserId, selectedUser, navigate]);

  // –î–æ–¥–∞–π—Ç–µ —Ç–∞–∫–æ–∂ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
  useEffect(() => {
    const authenticate = async () => {
      console.log('=== –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ê–£–¢–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–á ===');
      try {
        const userCredential = await loginToFirebase();
        console.log('userCredential:', userCredential);

        if (userCredential) {
          console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π');
          console.log('user.uid:', userCredential.user.uid);
          setCurrentUserId(userCredential.user.uid);
        } else {
          console.log('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ª–æ–≥—ñ–Ω');
          navigate('/login');
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);
      } finally {
        setIsLoading(false);
      }
    };
    authenticate();
  }, [navigate]);

  // Enter –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        // –î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É !e.shiftKey
        e.preventDefault(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π –ø–æ–≤–µ–¥—ñ–Ω—Ü—ñ
        if (newMessage.trim() && roomId && currentUserId) {
          handleSendMessage();
        }
      }
    };
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [newMessage, roomId, currentUserId]);

  if (isLoading) {
    return <div className={styles['chat__loading']}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–∞—Ç—É...</div>;
  }

  return (
    <div className={styles['chat']}>
      <Header />
      <div className={styles['chat__content']}>
        <div className={`${styles['chat__sidebar']} ${styles['sidebar']}`}>
          <div className={styles['sidebar__findUserContainer']}>
            <button
              className={styles['sidebar__backButton']}
              onClick={() => navigate(-1)}
            >
              <img
                src={miniIcons.arrowBackBlack}
                alt="–ù–∞–∑–∞–¥"
                className={styles['sidebar__backButton-img']}
              />
              –ù–∞–∑–∞–¥
            </button>
            <div className={styles['sidebar__searchUserInput']}>
              <SearchQueryContainer placeholder="–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" />
            </div>
          </div>
          <div className={styles['sidebar__usersList']}>
            {mockUsers.map((user) => (
              <div
                key={user.id}
                className={`${styles['usersList__user']} ${
                  selectedUser?.id === user.id ? styles['usersList__user--selected'] : ''
                }`}
                onClick={() => setSelectedUser(user)}
              >
                <img
                  src={user.profilePicture || avatar}
                  alt={`${user.firstName} ${user.lastName}`}
                  className={styles['usersList__userImg']}
                />
                <div className={styles['usersList__userInfo']}>
                  <div className={styles['usersList__userName']}>
                    {user.firstName} {user.lastName}
                  </div>
                  <div className={styles['usersList__userMessage']}>
                    {user.description}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
        <div className={`${styles['chat__main']} ${styles['main']}`}>
          {selectedUser && (
            <div className={styles['main__header']}>
              {selectedUser.firstName} {selectedUser.lastName}
            </div>
          )}
          <div className={styles['main__content']}>
            {messages.map((message) => (
              <div
                className={
                  message.user === currentUserId
                    ? styles.myMessage
                    : styles.anotherUserMessage
                }
                key={message.id}
              >
                {message.text}
              </div>
            ))}
          </div>
          {selectedUser && (
            <div className={`${styles['main__chatFooter']} ${styles['chatFooter']}`}>
              <input
                className={styles['chatFooter__input']}
                placeholder="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.."
                type="text"
                value={newMessage}
                onChange={(ev) => setNewMessage(ev.target.value)}
              />
              <button
                ref={buttonRef}
                className={styles['chatFooter__sendButton']}
                onClick={(e) => {
                  e.preventDefault();
                  handleSendMessage();
                }}
                disabled={!newMessage.trim()}
              >
                <img
                  className={styles['chatFooter__sendButton-img']}
                  src={newMessage ? miniIcons.sendMessage : miniIcons.sendMessageDisabled}
                  alt=""
                />
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
